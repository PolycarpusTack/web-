# Web+ Environment Configuration Example
# Copy this file to .env and update with your values

# Backend Configuration
# ====================

# Database Configuration
# PostgreSQL (recommended for production)
DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/webplus
# SQLite (for development)
# DATABASE_URL=sqlite+aiosqlite:///./web_plus.db

# Security
JWT_SECRET_KEY=your-secret-key-here-change-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24
API_KEY_LENGTH=32

# API Server Configuration
API_HOST=0.0.0.0
API_PORT=8002
API_RELOAD=true
API_WORKERS=1

# Ollama Configuration
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_TIMEOUT=300

# File Storage
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760  # 10MB in bytes
ALLOWED_EXTENSIONS=.txt,.pdf,.md,.json,.csv,.py,.js,.ts,.jsx,.tsx,.html,.css

# Redis Configuration (optional)
REDIS_URL=redis://localhost:6379/0
REDIS_CACHE_TTL=3600  # 1 hour

# Logging
LOG_LEVEL=INFO
LOG_FILE=backend.log
LOG_FORMAT=json

# CORS Configuration
CORS_ORIGINS=http://localhost:5173,http://localhost:3000
CORS_ALLOW_CREDENTIALS=true

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000

# Frontend Configuration
# =====================

# API Endpoints
VITE_API_URL=http://localhost:8002/api
VITE_WS_URL=ws://localhost:8002/ws

# Feature Flags
VITE_ENABLE_ANALYTICS=false
VITE_ENABLE_DEBUG_MODE=true
VITE_ENABLE_FILE_PREVIEW=true
VITE_ENABLE_VOICE_INPUT=false

# UI Configuration
VITE_APP_NAME=Web+
VITE_DEFAULT_THEME=system
VITE_MAX_FILE_UPLOAD_SIZE=10485760

# External Services
# =================

# OpenAI API (optional, for comparison)
OPENAI_API_KEY=your-openai-api-key-here

# Anthropic API (optional, for comparison)
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# Sentry Error Tracking (optional)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ENVIRONMENT=development

# Production Settings
# ==================

# When deploying to production, ensure you:
# 1. Generate a strong JWT_SECRET_KEY: openssl rand -hex 32
# 2. Set API_RELOAD=false
# 3. Increase API_WORKERS based on CPU cores
# 4. Use PostgreSQL instead of SQLite
# 5. Configure proper CORS_ORIGINS
# 6. Set appropriate LOG_LEVEL (WARNING or ERROR)
# 7. Enable and configure Redis for caching
# 8. Set up proper SSL/TLS certificates
# 9. Configure reverse proxy (nginx/caddy)
# 10. Set up monitoring and alerting